# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263    # xrc

___x_cmd_env_util_add_path(){
    local dir="$1"
    local path_tmp="$PATH:"
    local path_target="$dir"

    if [ ! -d "$dir" ] ; then
        env_log error "util_add_path: Directory not found: $dir"
        return 1
    fi

    local cur
    while [ ! "$path_tmp" = "" ]; do
        cur=${path_tmp%%:*}
        path_tmp=${path_tmp#*:}
        if [ "$cur" != "$dir" ]; then
            path_target="$path_target:$cur"
        fi
    done
    PATH="$path_target"
}



# Section: if_downloaded_then_unpack, is version download and unpack, is archive cached

___x_cmd_env_util_if_downloaded_then_unpack(){
    local candidate="${1:?Provide candidate}"
    local version="${2:?Provide version}"

    if ___x_cmd_env_util_is_download_and_unpack "$candidate" "$version"; then
        return 0
    fi

    if ! ___x_cmd_env_util_is_archive_cached "$candidate" "$version"; then
        env_log error "Installation package of $candidate $version does not exist"
        return 1
    fi

    ___x_cmd_env_run_common_if_notfound unpack "$candidate" "$version"
}

___x_cmd_env_util_is_download_and_unpack(){
    local candidate="${1:?Provide candidate}"
    local version="${2:?Provide version}"

    # Check the candidate version in general way.
    local candidate_path="$___X_CMD_ENV_PATH/${candidate}/versions/${version}"
    if [ ! -d "${candidate_path}" ]; then
        return 1
    fi
    return 0

    # TODO: Is command -v also used to check?
    # TODO: If the user has a local command, there will be conflicts.
    # TODO: If there is no use or a new environment, command -v is displayed natively.
}

___x_cmd_env_util_is_archive_cached(){
    local candidate="${1:?Provide candidate}"
    local version="${2:?Provide version}"

    local dir_list
    dir_list="$(ls "$___X_CMD_ENV_PATH/$candidate/archive" 2>/dev/null)"
    if [ "${dir_list#*"$candidate-$version"}" = "$dir_list" ]; then
        return 1
    fi

    return 0
}

___x_cmd_env_util_make_shim_dir(){
    local candidate="${1:?Provide candidate}"
    local version="${2:?Provide version}"
    local version_path=".x-cmd/.env/$candidate/version"
    local versions_path="$___X_CMD_ENV_PATH/$candidate/versions"

    if [ ! -d "$versions_path/$version" ]; then
        env_log error "Versions path not found: $versions_path/$version"
        return 1
    fi

    rm -rf "${___X_CMD_ENV_PATH}/$candidate/shims"
    mkdir -p "${___X_CMD_ENV_PATH}/$candidate/shims"

    for name in "${versions_path}/${version}/bin/"* ; do
        printf "%s\n" "$(cat <<A
#!/usr/bin/env sh
set -e

cur=\$(pwd)
while [ ! "\$cur" = "" ]; do
    if [ -f "\$cur/$version_path" ]; then
        version=\$(cat "\$cur/$version_path")
        exec $versions_path/\$version/bin/${name##*/} "\$@"
        return 0
    fi
    cur=\${cur%/*}
done

if [ -f $___X_CMD_ENV_PATH/$candidate/version ]; then
    version=\$(cat $___X_CMD_ENV_PATH/$candidate/version)
    exec $versions_path/\$version/bin/${name##*/} "\$@"
    return 0
fi
## TODO: no found
A
)">"$___X_CMD_ENV_PATH/$candidate/shims/${name##*/}"
        chmod +x "$___X_CMD_ENV_PATH/$candidate/shims/${name##*/}"
    done
}
