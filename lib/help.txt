subcommands:
    ls                      "list all installed environments"
    try                     "Set environment version in this shell session"
    untry                   "deactivate environment clear up the candidate you choosed in your local shell ; "=-" use last environment"
    use                     "Set global environment version and record into version config file"
    unuse                   "Remove environment and change version config file where record your environment value"
    exec                    "Run an executable with the selected candidates version"
    which                   "Display path of environment installed"
    var                     "backup or recover environment"
Examples:
    x env ls <candidate>
    x env current <candidate>
    x env prev <candidate>                          "Show the last version you used"
    x env untry <candidate>=<version> or  x env try <candidate>=-
    x env try <candidate>=<version> <candidate>=<version> <candidate>=<version>  ...
    x env use <candidate>=<version> <candidate>=<version> <candidate>=<version>  ...
    x env unuse <candidate>=<version> <candidate>=<version> <candidate>=<version>  ...
    x env exec <candidate>=<version> <candidate>=<version> -- <command>(x env ls ) or <file> or <script>
    x env which <candidate>
    aaa=$PATH                                       "define a variable and record your local PATH"
    x env var backup <variable(aaa)>                "record your PATH in a variable(aaa)"
    x env var ls                                    "display your variable"
    x env var get_backup <variable(aaa)>            "display your recorded PATH"
    x env var recover <variable(aaa)>  <variable>   "recover your environment"
    x env var recoverall                            "recover your environment"
    x env var recover <null> equal to x env var recoverall