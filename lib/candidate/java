#!/usr/bin/env bash
___x_cmd_env_java_ls(){
    :
}

___x_cmd_env_java_la(){
    :
}

___x_cmd_env_java_download(){
    :
}

___x_cmd_env_java_install(){
    local candidate version folder

	candidate="$1"
	version="$2"
	folder="$3"

    ENV_AVAILABLE="false" #availability set up
    ___x_cmd_env_candidate_present "$candidate" || return 1
    ___x_cmd_env_determine_version "$candidate" "$version" "$folder" || return 1

    if [[ -d "$(x wsroot)/.x-cmd/env/lib/candidate/${candidate}/${VERSION}" || -L "$(x wsroot)/.x-cmd/env/lib/candidate/${candidate}/${VERSION}" ]]; then
		echo ""
        env_log info "${candidate} ${VERSION} is already installed."
		return 0
	fi

}

___x_cmd_env_java_uninstall(){
    :
}

___x_cmd_env_java_try(){
    :
}

___x_cmd_env_java_use(){
    :
}

___x_cmd_env_java_ws(){
    :
}

___x_cmd_env_java_current(){
    :
}

___x_cmd_env_java_which(){
    :
}

___x_cmd_env_java_exec(){
    :
}


___x_cmd_env_candidate_present(){
    local candidate="$1"

	if [ -z "$candidate" ]; then
		echo ""
        env_log error "No candidate provided."
		___x_cmd_env help
		return 1
	fi
}

___x_cmd_env_determine_version(){
    local candidate version folder

	candidate="$1"
	version="$2"
	folder="$3"

    if [[ "$ENV_AVAILABLE" == "false" && -n "$version" && -d "$(x wsroot)/.x-cmd/env/lib/candidate/${candidate}/${version}" ]]; then
		VERSION="$version"
    elif [[ "$ENV_AVAILABLE" == "false" && -z "$version" && -L "$(x wsroot)/.x-cmd/env/lib/candidate/${candidate}/current" ]]; then
		VERSION=$(readlink "$(x wsroot)/.x-cmd/env/lib/candidate/${candidate}/current" | sed "s!$(x wsroot)/.x-cmd/env/lib/candidate/${candidate}/!!g")
    elif [[ "$ENV_AVAILABLE" == "false" && -n "$version" ]]; then
		env_log error "Stop! ${candidate} ${version} is not available while offline."
		return 1
    elif [[ "$ENV_AVAILABLE" == "false" && -z "$version" ]]; then
		env_log error "This command is not available while offline."
		return 1
    else
        if [[ -z "$version" ]]; then
			version=$(curl --silent --location "https://api.sdkman.io/2/candidates/default/${candidate}")
		fi

		local validation_url="https://api.sdkman.io/candidates/validate/${candidate}/${version}/$(echo $ENV_PLATFORM | tr '[:upper:]' '[:lower:]')"
		VERSION_VALID=$(curl --silent --location "$validation_url")
		__sdkman_echo_debug "Validate $candidate $version for $SDKMAN_PLATFORM: $VERSION_VALID"
		__sdkman_echo_debug "Validation URL: $validation_url"

		if [[ "$VERSION_VALID" == 'valid' || "$VERSION_VALID" == 'invalid' && -n "$folder" ]]; then
			VERSION="$version"

		elif [[ "$VERSION_VALID" == 'invalid' && -L "${SDKMAN_CANDIDATES_DIR}/${candidate}/${version}" ]]; then
			VERSION="$version"

		elif [[ "$VERSION_VALID" == 'invalid' && -d "${SDKMAN_CANDIDATES_DIR}/${candidate}/${version}" ]]; then
			VERSION="$version"

		else
			if [[ -z "$version" ]]; then
				version="\b"
			fi

			echo ""
			__sdkman_echo_red "Stop! $candidate $version is not available. Possible causes:"
			__sdkman_echo_red " * $version is an invalid version"
			__sdkman_echo_red " * $candidate binaries are incompatible with your platform"
			__sdkman_echo_red " * $candidate has not been released yet"
			echo ""
			__sdkman_echo_yellow "Tip: see all available versions for your platform:"
			echo ""
			__sdkman_echo_yellow "  $ sdk list $candidate"
			return 1
		fi
    fi
}

ENV_PLATFORM_TMP="$(xrc os && os name && os arch)"
ENV_PLATFORM="$(cat <<<$ENV_PLATFORM_TMP | tr '[:lower:]' '[:upper:]')"
