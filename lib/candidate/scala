# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263    # xrc
xrc env/lib/sdk

# Section: Scala ls_remote

___x_cmd_env_scala_sort_versions(){
	sort -t . -n
}

___x_cmd_env_scala_ls_remote(){
	local cache_path="$___X_CMD_ENV_PATH/scala/cache/cache_list"
	local cache_expiration="${2:-1}"
	___x_cmd_httpget "https://www.scala-lang.org/download/all.html" "$cache_path" "$cache_expiration" 2>/dev/null && \
	awk  'match($0, /\/[0-9.]+.html/) { print substr($0, RSTART+1, RLENGTH-6)}' <"$cache_path" | ___x_cmd_env_scala_sort_versions | uniq
}

# EndSection
# Section: download

___x_cmd_env_scala_download_archive(){
	local version="${1:?Provide a version}"
    local archive_path="$___X_CMD_ENV_PATH/scala/archive/scala-${version}.zip"
    local download_url
    env_log info "Downloading scala ${version}"

    # TODO: optimizable
    case ${version} in
        2.10*) download_url="https://downloads.lightbend.com/scala/${version}/scala-${version}.zip"                 ;;
        2.11*) download_url="http://downloads.typesafe.com/scala/${version}/scala-${version}.zip"                   ;;
        2.12*) download_url="http://downloads.lightbend.com/scala/${version}/scala-${version}.zip"                  ;;
        2.13*) download_url="https://downloads.lightbend.com/scala/${version}/scala-${version}.zip"                 ;;
        3.* )  download_url="https://github.com/lampepfl/dotty/releases/download/${version}/scala3-${version}.zip"  ;;
    esac

    if [ "${version}" = "2.11.11" ] || [ "${version}" = "2.11.12" ] ; then
        download_url="https://downloads.lightbend.com/scala/${version}/scala-${version}.zip"
    fi

    if ___x_cmd_env_util_is_archive_cached scala "$version" 2>/dev/null; then
        env_log info "Archive existed: $version"
        return 0
    fi

    mkdir -p "$(dirname "$archive_path")"
    env_log info "Downloading $download_url"
    if ! curl --progress-bar --location --retry-max-time 10 --retry 0 "$download_url" --output "$archive_path" ; then
        env_log error "Download failure from $download_url"
        return 1
    fi
}
# EndSection

# Section: unpack

___x_cmd_env_scala_unpack(){
	local version="${1:?Provide a version}"
    local t_version
    local archive_path="$___X_CMD_ENV_PATH/scala/archive/scala-${version}.zip"
    local archive_unpack_files

    env_log info "Unpacking: scala ${version}"

    x uz "$___X_CMD_ENV_PATH/scala/archive/scala-${version}.zip" "$(dirname "$archive_path")" || return 1

    case ${version} in
        3*) t_version=3  ;;
    esac


    if [ "${t_version}" = "3" ] ; then
       local archive_unpack_files
        archive_unpack_files="$(dirname "$archive_path")/scala3-$version"
    else
       local archive_unpack_files
       archive_unpack_files="$(dirname "$archive_path")/scala-$version"
    fi

    local versions_path="$___X_CMD_ENV_PATH/scala/versions"
	mkdir -p "$versions_path/${version}"
	mv -f "$archive_unpack_files/"* "$versions_path/${version}"
	rm -rf "$archive_unpack_files"
}

# EndSection

# Section: exec,current

___x_cmd_env_scalat_current(){
    scala -version
}
# EndSection