# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263    # xrc

# Section: utils

___x_cmd_env_python_get_system_platform(){
    xrc os
    case "$(___x_cmd_os name)" in
        linux)      system=Linux            ;;
        windows)    system=Windows          ;;
        darwin)     system=MacOSX           ;;
        *)          return 1 ;;
    esac

    case "$(___x_cmd_os arch)" in
        aarch64)    platform=aarch64        ;;
        x64)        platform=x86_64         ;;
        arm64)      platform=arm64          ;;
        *)          return 1 ;;
    esac
}

___x_cmd_env_python_get_miniconda_name_and_filename(){
    local version="${1:?Provide python version}"

    local platform
    local system
    ___x_cmd_env_python_get_system_platform

    miniconda_name="Miniconda3-${version}-${system}-${platform}"
    if [ $system = "Windows" ] ; then
        miniconda_filename="${miniconda_name}.exe"
        archive_name="python-${version}.exe"
    else
        miniconda_filename="${miniconda_name}.sh"
        archive_name="python-${version}.sh"
    fi
}

# EndSection

# Section: ls, la

___x_cmd_env_python_ls_local(){
    {
        ___x_cmd_env_common_ls_local python
        # Compatible node version in pyenv.
        if [ -n "$PYENV_ROOT" ] && [ -d "$PYENV_ROOT"/versions ] ; then
            ls "$PYENV_ROOT"/versions
        fi
    } | uniq
}

___x_cmd_env_python_ls_remote(){
	local cache_path="$___X_CMD_ENV_PATH/python/cache/version_list"

    local platform
    local system
    ___x_cmd_env_python_get_system_platform

    ___x_cmd_httpget "https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/" "$cache_path" 2>/dev/null && \
    awk -v platform="${platform}" -v arch="${system}" '
        BEGIN{RS="<a href=";FS="\""}{
            if (match($2, "^.*-" arch "-" platform ".sh$")) {
                split($2, a, /-/)
                print a[2]
            }
        }' <"$cache_path"
}

# EndSection

# Section: download, unpack

___x_cmd_env_python_download()(
    local miniconda_name
    local miniconda_filename
    local archive_name
    local version="${1:?Provide python version}"

    if ___x_cmd_env_util_is_archive_cached python "$version"; then
        env_log info "Archive existed: $version"
    else
        ___x_cmd_env_python_get_miniconda_name_and_filename "$version"

        local candidate_path="$___X_CMD_ENV_PATH/python/archive"
        mkdir -p "${candidate_path}"
        cd "${candidate_path}" || return 1
        local url="https://repo.anaconda.com/miniconda"
        if [ "${___X_CMD_IN_CHINA_NET:-0}" -eq 1 ]; then
            url="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda"
        fi

        env_log info "Downloading $url/$miniconda_filename"
        if curl --fail --output "$archive_name" "$url/$miniconda_filename"; then
            env_log info "Download completed python $miniconda_name"
            return
        else
            env_log error "Download failure from $url/${miniconda_filename}"
            return 1
        fi
    fi

    if ! ___x_cmd_env_python_unpack "$version"; then
		env_log info "Fail to unpack python of version: $version."
		return 1
	fi
)

___x_cmd_env_python_unpack(){
    local version="${1:?Provide python version}"
    local archive_name
    ___x_cmd_env_python_get_miniconda_name_and_filename "$version"

    env_log info "Unpacking $archive_name"
    (
        local candidate_path="$___X_CMD_ENV_PATH/python/versions"
        mkdir -p "${candidate_path}"
        cd "$___X_CMD_ENV_PATH/python/archive" || return 1
        chmod +x "${archive_name}" && \
        "./${archive_name}" -b -u -p "${candidate_path}/${version}" 1>&2
    )
}


# EndSection

___x_cmd_env_python_ws(){
    :
}
