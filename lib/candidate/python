# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263,SC2120    # xrc

# Section: utils

___x_cmd_env_python_get_platform_arch(){

    local _platform
    local _arch
    _platform="$(x os name)"
    _arch="$(x os arch)"

    case "$_platform" in
        linux)      system=Linux                     ;;
        windows)    system=Windows                   ;;
        darwin)     system=MacOSX                    ;;
        *)          env:error "your arch:(" "$_platform" ") are not supported"
                    return 1
                    ;;
    esac

    case "$_arch" in
        aarch64|arm64|armv7l|armv6l)    arch="$_arch"   ;;
        x64)                            arch=x86_64     ;;
        *)          env:error "your arch:(" "$_arch" ") are not supported"
                    return 1
                    ;;
    esac
}

___x_cmd_env_python_get_compression(){
    if [ "$(x os name)" = "win" ] ; then
        printf "exe"
    else
        printf "sh"
    fi
}
___x_cmd_env_python_get_miniconda_filename(){
    local version="${1:?Provide a Version}"
    local system
    local arch
    local compression
    env:info "1"
    ___x_cmd_env_python_get_platform_arch || return 1
    env:info "2"
    compression="$(___x_cmd_env_python_get_compression)" || return 1
    env:info "3"
    printf "Miniconda3-%s-%s-%s.%s" "${version}" "${system}" "${arch}" "${compression}"
}

# EndSection

# Section: ls, la

___x_cmd_env_python_get_list_url(){
    printf "https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/"
}

___x_cmd_env_python_get_version_info(){
    local system
    local ___X_CMD_ENV_ARCH
    ___x_cmd_env_python_get_platform_arch || return 1
    awk -v pattern="$pattern" -v platform="${system}" -v arch="$arch" '
    BEGIN{RS="<a href=";FS="\""} (match($2, "^.*-" platform "-" arch ".sh$")) {
        split($2, a, /-/)
        version = a[2]
        if (version ~ pattern) { print version }
    }'
}

# EndSection

# Section: download, unpack

___x_cmd_env_python_get_download_url(){
    local version="${1:?Provide python version}"
    local miniconda_filename
    local compression
    compression=$(___x_cmd_env_python_get_compression)
    miniconda_filename="$(___x_cmd_env_python_get_miniconda_filename "$version")"
    mkdir -p "$(dirname "$archive_path")"
    # TODO: use function to switch mirror
    local url="https://repo.anaconda.com/miniconda"
    if [ "${___X_CMD_IN_CHINA_NET:-0}" -eq 1 ]; then
          url="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda"
    fi
     printf "%s/%s" "$url" "$miniconda_filename"
}

___x_cmd_env_python_unpack(){
    local version="${1:?Provide python version}"
    local miniconda_filename
    local compression
    compression=$(___x_cmd_env_python_get_compression)

    env:info "Unpacking python-$version"

    local versions_path="$___X_CMD_ENV_PATH/python/versions"
    mkdir -p "${versions_path}"
    local archive_path="$___X_CMD_ENV_PATH/python/archive/python-$version.$compression"
    chmod +x "${archive_path}" && \
        "${archive_path}" -b -u -p "${versions_path}/${version}" 1>&2
}

# EndSection

# Section: ui_catsel

#TODO: Should be optimized
___x_cmd_env_python_ui_catsel(){
    case "$#" in
        0)  ___x_cmd_env_python_ls_remote | awk '{ split($0,arr,"."); vmap[arr[1]]=1 } END{ for(key in vmap){print key} }'  ;;
        1)  ___x_cmd_env_python_ls_remote | grep ^"$1" | awk '{ print $0 }' ;;
    esac
}

# EndSection