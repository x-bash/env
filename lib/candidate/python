# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263    # xrc

# Section: utils

___x_cmd_env_python_get_miniconda_name_and_filename(){
    local version="${1:?Provide python version}"

    xrc os
    local platform
    local system

    case "$(___x_cmd_os name)" in
        linux)      system=Linux            ;;
        windows)    system=Windows          ;;
        darwin)     system=MacOSX           ;;
        *)          return 1 ;;
    esac

    case "$(___x_cmd_os arch)" in
        aarch64)    platform=aarch64        ;;
        x64)        platform=x86_64         ;;
        arm64)      platform=arm64          ;;
        *)          return 1 ;;
    esac

    miniconda_name="Miniconda3-${version}-${system}-${platform}"
    if [ $system = "Windows" ] ; then
        miniconda_filename="${miniconda_name}.exe"
    else
        miniconda_filename="${miniconda_name}.sh"
    fi
}

# EndSection

# Section: ls, la
___x_cmd_env_python_ls(){
    if [ -z "$remote" ] ; then
		___x_cmd_env_common_ls python
	else
        xrc os
        case "$(___x_cmd_os name)" in
            linux)      system=Linux            ;;
            windows)    system=Windows          ;;
            darwin)     system=MacOSX           ;;
            *)          return 1 ;;
        esac

        case "$(___x_cmd_os arch)" in
            aarch64)    platform=aarch64        ;;
            x64)        platform=x86_64         ;;
            arm64)      platform=arm64          ;;
            *)          return 1 ;;
        esac

        local cache_path="$___X_CMD_ENV_PATH/python/cache"
        if [ -f "$cache_path/version_list" ] && [ -n "$(find "$cache_path/version_list" -mtime -1)" ] ; then
            cat "$cache_path/version_list"
        else
            mkdir -p "$cache_path"
            curl --silent "https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/" | \
                awk "$(cat <<A
BEGIN{RS="<a href=";FS="\""}{
    if (match(\$2, /^.*-$system-$platform.sh$/)) {
        split(\$2, a, /-/)
        print a[2]
    }
}
A
            )" | tee "$cache_path/version_list"
	    fi
    fi
}

___x_cmd_env_python_la(){
    :
}

# EndSection

# Section: download,install

___x_cmd_env_python_download(){
    (
        local miniconda_name
        local miniconda_filename
        local version="${1:?Provide python version}"

        ___x_cmd_env_python_get_miniconda_name_and_filename "$version"
        local candidate_path="$___X_CMD_ENV_PATH/python/versions"
        mkdir -p "${candidate_path}"
        cd "${candidate_path}" || return 1
        local url="https://repo.anaconda.com/miniconda"
        if [ "${___X_CMD_IN_CHINA_NET:-0}" -eq 1 ]; then
            url="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda"
        fi

        env_log info "Downloading $url/$miniconda_filename"
        if curl --fail --output "$miniconda_filename" "$url/$miniconda_filename"; then
            env_log info "Install python $miniconda_name"
            chmod +x "${miniconda_filename}" && \
                "./${miniconda_filename}" -b -u -p "./${version}" 1>&2 && \
                rm -rf "./${miniconda_filename}"
            return
        else
            env_log error "Download failure from $url/${miniconda_filename}"
            return 1
        fi
    )
}


# 1. If no special version and no local python, we will install a default version for you.
# 2. It will download and use the python version.
___x_cmd_env_python_install(){
    local version="${1:?Provide python version}"
    ___x_cmd_env_common_pre_install_check python "$version" && \
        ___x_cmd_env_python_download "$version" || return
    ___x_cmd_env_common_use python "$version"
}

# EndSection

___x_cmd_env_python_ws(){
    :
}

___x_cmd_env_python_which(){
    :
}
