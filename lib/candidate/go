# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263,SC2120    # xrc

# Section: get system platform

___x_cmd_env_go_get_system_platform(){
    case "$(x os name)" in
        linux)      ___x_cmd_env_platform=linux    ;;
        win)        ___x_cmd_env_platform=windows  ;;
        darwin)     ___x_cmd_env_platform=darwin   ;;
        *)          _env:error "your arch:(" "$(___x_cmd_os name)" ") are not supported"
                    return 1
                    ;;
    esac
    case "$(x os arch)" in
        x86)           ___x_cmd_env_arch=386        ;;
        x64)           ___x_cmd_env_arch=amd64      ;;
        arm64)         ___x_cmd_env_arch=arm64      ;;
        armv7l|ARMv6)  ___x_cmd_env_arch=armv6l     ;;
        *)  env:error "your arch:(" "$(___x_cmd_os arch)" ") are not supported"
            return 1
            ;;
    esac
}
# EndSection

# Section: ls_remote

___x_cmd_env_go_ls_remote(){
    local pattern="${1:-""}"
    local cache_path="$___X_CMD_ENV_PATH/go/cache/version_list"
    local cache_expiration="${2:-86400}"

    local platform
    local arch

    if ___x_cmd_env_go_get_system_platform ; then
        ___x_cmd_httpget "https://golang.google.cn/dl/" "$cache_path" "$cache_expiration" && \
            awk -v platform="${platform}" -v arch="${arch}" -v pattern="${pattern}" \
            'match($0, "/dl/go[0-9.]+" platform "-" arch) {
                match($0, "/dl/go[0-9.]+")
                version = substr($0, RSTART+6, RLENGTH-7)
                if (pattern == "" || index(version, pattern) > 0) {
                    print version
                }
            }' < "$cache_path"  | ___x_cmd_env_common_sort_version | ___x_cmd_env_common_simplify_version
    fi
}
# EndSection

# Section: download

___x_cmd_env_deno_get_download_url(){
    local version=${1:?Provide a version}
    local compression='tar.gz'; [ "${___x_cmd_env_platform}" = 'windows' ] && compression='zip'
    printf "https://golang.google.cn/dl/go%s.%s-%s.%s" "${version}" "${___x_cmd_env_platform}" "${___x_cmd_env_arch}" "${compression}"
}

# EndSection

# Section: unpack

___x_cmd_env_go_get_compression(){
    case "$(x os name)" in
        win)        printf 'zip'   ;;
        *)          printf 'tar.gz';;
    esac
}

# TODO: Support windows
# ___x_cmd_env_go_unpack_win(){
#     x uz "$archive_path" "$(dirname "$archive_path")" || return 1
#     local version_path="${___X_CMD_ENV_PATH}/go/versions/${version}/bin"
#     mkdir -p "${version_path}" && (
#         mv "${archive_unpack_files}/"*/* "${version_path}" || return 1
#         cd "${version_path}" && chmod +x go.exe npm npx
#     )
# }

# EndSection

# Section: ui_catsel

#TODO: Should be optimized
___x_cmd_env_go_ui_catsel(){
    case "$#" in
        0)  ___x_cmd_env_go_ls_remote | awk '{ split($0,arr,"."); vmap[arr[1]]=1 } END{ for(key in vmap){print key} }' ;;
        1)  ___x_cmd_env_go_ls_remote | grep ^"$1" | awk '{ print $0 }' ;;
    esac
}

# EndSection