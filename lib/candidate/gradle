# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263    # xrc

# Section: gradle ls_remote and la

___x_cmd_env_gradle_ls_remote(){
    # local pattern="${1:-""}"	# TODO: ls remote filter
    local cache_expiration="${2:-1}"
    local cache_path="$___X_CMD_ENV_PATH/gradle/cache/version_list"

    ___x_cmd_httpget "https://services.gradle.org/distributions/" "$cache_path" "$cache_expiration" 2>/dev/null && \
    awk 'match($0, /gradle-([0-9.]+)-all.zip"/){ print substr($0, RSTART+7, RLENGTH-16) }' <"$cache_path"
}

# EndSection

# Section: download, unpack

___x_cmd_env_gradle_download_archive(){
    local version="${1:?Provide gradle version}"

    if ___x_cmd_env_util_is_archive_cached gradle "$version" 2>/dev/null; then
        env_log info "Archive existed: $version"
        return 0
    fi

    local archive_path="$___X_CMD_ENV_PATH/gradle/archive/gradle-$version.zip"
    mkdir -p "$(dirname "$archive_path")"
    local url="https://services.gradle.org/distributions"

    env_log info "Downloading $url/gradle-$version-all.zip"
    if curl --progress-bar --location --retry-max-time 10 --retry 0 "$url/gradle-$version-all.zip" --output "$archive_path" ; then
        env_log info "Download completed gradle-$version-all.zip"
        return
    else
        env_log error "Download failure from $url/gradle-$version-all.zip"
        return 1
    fi
}

___x_cmd_env_gradle_unpack(){
	local version="${1:?Provide a version}"
	env_log info "Unpacking: gradle ${version}"
	unzip -oq "$___X_CMD_ENV_PATH/gradle/archive/gradle-${version}.zip" -d "$___X_CMD_ENV_PATH/gradle/tmp/out"
	mkdir -p "$___X_CMD_ENV_PATH/gradle/versions"
	mv -f "$___X_CMD_ENV_PATH/gradle/tmp/out/"* "$___X_CMD_ENV_PATH/gradle/versions/${version}"
	rm -rf "$___X_CMD_ENV_PATH/gradle/tmp/out"
}

# EndSection