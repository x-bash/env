# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263    # xrc

# Section: mirror

___X_CMD_ENV_NODE_MIRROR="https://nodejs.org/dist"

# EndSection

# Section: full_version, ls_remote
___x_cmd_env_node_full_version(){
    ___x_cmd_env_node_lsremote "${1:?Provide node version pattern}" "$2" | awk 'END{ if (NR<=0) { exit(1) } else print $1;   }'
}

___x_cmd_env_node_ls_remote(){
    local pattern="${1:-""}"
    local cache_expiration="${2:-1}"

    local cache_path="$___X_CMD_ENV_PATH/node/cache"

	___x_cmd_httpget "$___X_CMD_ENV_NODE_MIRROR/index.tab" "$cache_path" "$cache_expiration" && \
    awk -v pattern="$pattern" -v prev_codename="x-cmd" '
    ((NR>1)&&($1)){
        codename=$10
        version=$1
        if ( (pattern == "") || ( index( version, pattern ) > 0 ) ) {
            if (codename ~ /^\-?$/)                                 print version
            else if (codename!="" && codename != prev_codename)     print version, codename, "*"        # The latest version of this code name
            else                                                    print version, codename
        }
        prev_codename=codename
    }' <"$cache_path" | sort -t. -u -k 1.2,1n -k 2,2n -k 3,3n
}
# EndSection

# Section: download

___x_cmd_env_node_download(){
    local version="${1:?Provide node version}"
    local full_version
    if full_version=$(___x_cmd_env_node_full_version "${version}" -); then
        env_log error "Version '${version}' not found $full_version. "
        return 1
    fi

    if ___x_cmd_env_common_util_is_archieve_cached node "$full_version"; then
        env_log info "Archieve existed: $full_version"
        return 0
    fi

    # TODO: Check if version is already downloaded
    # TODO: Handle bsd, sunos ..

    local platform
    local arch
#     x readline platform arch <<A
# $(x os name; x os arch)
# A

    {
        read -r platform
        read -r arch
    } <<A
$(x os name; printf "\n"; x os arch)
A

    local archieve_dir="$___X_CMD_ENV_PATH/node/cache/bin/${slug}"
    local slug="node-${full_version}-${platform}-${arch}"
    local compression='tar.gz'; [ "${platform}" = 'win' ] && compression='zip' # TODO: tar.xz support

    local tarball="${archieve_dir}/${slug}.${compression}"

    # TODO: node <= 0.1.13 does not have a directory
    local tarball_url="${___X_CMD_ENV_NODE_MIRROR}/${full_version}/${slug}.${compression}"

    if ! curl -L -C - --progress-bar "${tarball_url}" -o "${tarball}"; then
        command rm -rf "${tarball}" "${archieve_dir}"
        env_log error "Binary download from ${tarball_url} failed, trying source."
        return 1
    fi
    env_log info "Downloaded ${tarball_url} to ${tarball}"
}
# EndSection

# Section: unpack
___x_cmd_env_node_unpack_win(){
    local version_path
    version_path="${___X_CMD_ENV_PATH}/node/versions/${full_version}/bin"

    unzip -q "${tarball}" -d "${archieve_dir_files}" || return 1

    mkdir -p "${version_path}" && (
        mv "${archieve_dir_files}/"*/* "${version_path}" || return 1
        cd "${version_path}" && chmod +x node.exe npm npx
        # chmod +x "${version_path}"/npx 2>/dev/null
    )
}

___x_cmd_env_node_unpack_other(){
    tar -xzf "${tarball}" -C "${archieve_dir_files}" --strip-components 1 || return 1

    local version_path="${___X_CMD_ENV_PATH}/node/versions/${full_version}"
    mkdir -p "${version_path}" && mv "${archieve_dir_files}/"* "${version_path}"
}

___x_cmd_env_node_unpack(){
    # TODO: checksum
    local archieve_dir_files="${archieve_dir}/files"
    mkdir -p "${archieve_dir_files}"

    case "$platform" in
        win)    ___x_cmd_env_node_unpack_win    ;;
        *)      ___x_cmd_env_node_unpack_other  ;;
    esac
    local code=$?

    rm -rf "${archieve_dir_files}"
    return $code
}

# EndSection

___x_cmd_env_node_ws(){
    :
}