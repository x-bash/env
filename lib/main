# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263    # xrc


# Section: common functions

___X_CMD_ENV_PATH="$___X_CMD_ROOT/.bin/env"
___X_CMD_ENV_TMP_PATH="$___X_CMD_ROOT/.tmp/env"

___x_cmd_env_common_pre_install_check(){
    local candidate="${1:?Provide candidate}"
    local version="${2:?Provide version}"
    case $version in
        default)
            # TODO: Handle the python3 case.
            if command -v "${candidate}" >/dev/null; then
                env_log info "${candidate} is already installed in $(command -v "${candidate}")"
                return 1
            fi
            ;;
    esac

    # Check the candidate version in general way.
    # The path should have no system and platform info.
    local candidate_path="$___X_CMD_ENV_PATH/${candidate}"
    if [ -d "$candidate_path" ]; then
        env_log info "$candidate $version is already installed in $candidate_path ."
        return 1
    fi

    env_log info "Installing $1 $2"
}

___x_cmd_env_common_uninstall(){
    local candidate="${1:?Provide candidate}"
    local version="${2:?Provide the version}"
    env_log info "Uninstalling $1 $2"

    local candidate_path="$___X_CMD_ENV_PATH/${candidate}"
    if [ -d "$candidate_path" ]; then
        rm -rf "${candidate_path}"
    else
        env_log  warn "This ${candidate} ${version} is no exist."
        return 1
    fi
}

___x_cmd_env_common_pre_exec_check() {
    local candidate="${1:?Provide candidate}"
    local version="${2:?Provide the version}"

    local candidate_path="$___X_CMD_ENV_PATH/${candidate}"
    case $version in
        default)
            # TODO: Handle the python3 case.
            if command -v "${candidate}" >/dev/null; then
                env_log info "${candidate} is already installed in $(command -v "${candidate}")"
                return 1
            fi
            ;;
        *)
            if [ ! -d "${candidate_path}/${version}" ]; then
                env_log error "$candidate $version is not installed."
                return 1
            fi
            ;;
    esac

    env_log debug "Exec $1 $2"
}

# EndSection

___x_cmd_env_main() {
    param:scope     "env"
    param:dsl <<A
subcommands:
    ls                      "list all installed environments"
    la                      "list all available environments"
    download                "Download environment"
    install                 "Install environment"
    uninstall               "Remove environment"
    try                     "Set default environment in this shell session"
    use                     "Set global default environment"
    ws                      "Set workspace default environment"

    current                 "Show current environment"
    which                   "Display path of environment installed"

    exec                    "Run an executable with the selected candidates version"
A
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        ___x_cmd_env help
        return 1
    fi

    "___x_cmd_env_main_$PARAM_SUBCMD" "$@"
}

___x_cmd_env_main_ls(){
    param:scope "env"
    param:dsl <<A
options:
    #1        "Environment Candidates" <candidates>:candidates_list
A
    param:run

    if [ -z "$1" ]; then
        ___x_cmd_env_main_install help
        return 1
    fi

    # TODO: 增加 本地简写版本对应关系 和 全局简写版本对应关系
    # TODO: V8 -> V8.2   --> (Remote) V8.6
    ls "$___X_CMD_ENV_PATH/$1"
    ___x_cmd_env_op_candidate ls "$@"
}

___x_cmd_env_main_la(){
    ___x_cmd_env_op_candidate la "$@"
}

___x_cmd_env_main_download(){
    ___x_cmd_env_op_candidate download "$@"
}

___x_cmd_env_main_install() {
    # TODO: You can do more better in #2 advise json
    param:scope "env"
    param:dsl <<A
options:
    #1        "Environment Candidates" <candidates>:candidates_list
    #2        "Version"                <version>="default"
A
    param:run

    if [ -z "$1" ]; then
        ___x_cmd_env_main_install help
        return 1
    fi
    ___x_cmd_env_op_candidate install "$@"
}

___x_cmd_env_main_uninstall(){
    param:scope "env"
    param:dsl <<A
options:
    #1        "Environment Candidates" <candidates>:candidates_list
    #2        "Version"                <version>
A
    param:run

    if [ -z "$1" ]; then
        ___x_cmd_env_main_uninstall help
        return 1
    fi

    ___x_cmd_env_op_candidate uninstall "$@"
}

___x_cmd_env_main_try(){
    ___x_cmd_env_op_candidate try "$@"
}

___x_cmd_env_main_use(){
    ___x_cmd_env_op_candidate use "$@"
}

___x_cmd_env_main_ws(){
    if [ $# -eq 0 ]; then
        : TODO: list workspace environment
    fi

    ___x_cmd_env_op_candidate ws "$@"
}

___x_cmd_env_main_current(){
    if [ $# -eq 0 ]; then
        : TODO: list current environment
    fi

    ___x_cmd_env_op_candidate current "$@"
}

___x_cmd_env_main_which(){
    ___x_cmd_env_op_candidate which "$@"
}

___x_cmd_env_main_exec(){
    param:scope "env"
    param:dsl <<A
options:
    #1        "Environment Candidates" <candidates>:candidates_list
    #2        "Version"                <version>
A
    param:run


    if [ -z "$1" ]; then
        ___x_cmd_env_main_exec help
        return 1
    fi

    ___x_cmd_env_op_candidate exec "$@"
}
