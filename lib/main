# ___X_CMD_ENV_VERSION_CONFIG="
# java=1.1
# node=1.2
# python=1.3
# "


___x_cmd_env_prepare(){
    local candidate=$@
    local i
    for i in "$@"; do
        if ! x pkg install "${i%=*}" "${i#*=}"; then
            pkg:error "Cannot install package: $i"
            return 1;
        fi
    done
}

___x_cmd_env_try(){
    param:scope "env"
    param:dsl <<A
advise:
    #2        xrc env/latest && ___x_cmd_env_advise_ls_local_version
options:
    #1        "Environment Candidates" <candidates>:candidates_list
    #2        "Version"                <version>=""
A
    param:run

    local candidate=${1}
    local version

    ___x_cmd_env_prepare >/dev/null "$@" || return

    ___x_cmd_env___var_add "$@"
}

___x_cmd_env_use(){
    param:scope "env"
    param:dsl <<A
advise:
    #2        xrc env/latest && ___x_cmd_env_advise_ls_local_version
options:
    --use_shims   "Use shims"
    #1            "Environment Candidates" <candidates>:candidates_list
    #2            "Version"                <version>=""
A
    param:run

    ___x_cmd_env_try "$@"

    local backup="$___X_CMD_ENV_VERSION_CONFIG"
    if [ -f "$___X_CMD_ENV_VERSION_CONFIG_PATH" ]; then
        ___X_CMD_ENV_VERSION_CONFIG="$(cat "$___X_CMD_ENV_VERSION_CONFIG_PATH")"
    else
        ___X_CMD_ENV_VERSION_CONFIG=""
    fi

    ___X_CMD_ENV___VAR_ADD_NO_SETUP=1 ___x_cmd_env___var_add "$@"
    ___x_cmd_env_config_save

    ___X_CMD_ENV_VERSION_CONFIG="$backup"
}

___x_cmd_env_exec()(
    param:scope "env"
    param:dsl <<A
advise:
    #1        xrc env/latest && ___x_cmd_env_advise_ls_cmd
options:
    #1        "Environment Candidates command and version you want to find, e.g. 'node=v16.9.0'"
A
    param:run
    
    local arg
    local s
    for arg in "$@"; do
        case "$arg" in
            *=*)        s="$s $arg" ;;
            *)          break
        esac
    done
    eval ___x_cmd_env_use "$s" && "$@"
)
