# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263    # xrc

# Section: ENV ___X_CMD_ENV_PATH

___X_CMD_ENV_PATH="$___X_CMD_ROOT/.env"

# EndSection

# Section: main
___x_cmd_env_main() {
    param:scope     "env"
    param:dsl <<A
subcommands:
    ls                      "list all installed environments"
    download                "Download environment"
    install                 "Install environment"
    uninstall               "Remove environment"
    try                     "Set default environment in this shell session"
    use                     "Set global default environment"

    current                 "Show current environment"
    which                   "Display path of environment installed"

    exec                    "Run an executable with the selected candidates version"
A
    param:run

    # TODO: la---"list all available environments"
    # TODO: ws---"Set workspace default environment"

    if [ -z "$PARAM_SUBCMD" ]; then
        ___x_cmd_env_main help
        return 1
    fi

    "___x_cmd_env_main_$PARAM_SUBCMD" "$@"
}
# EndSection

# Section: run_common_if_notfound
___x_cmd_env_run_common_if_notfound(){
    local op="${1:?Provide op}";  shift
    local candidate="${1:?Provide candidate}";  shift

    if ! ___x_cmd_env_candidate_has "$candidate"; then
        env_log error "Candidate in existed: $candidate"
        return 1
    fi

    # TODO: It might be better to have one folder for one language.
    xrc "env/lib/candidate/$candidate"

    local cmd="___x_cmd_env_${candidate}_${op}"
    if command -v "$cmd" >/dev/null; then
        "$cmd" "$@"
    else
        # env_log warn "Candidate ${candidate} has no op: $op, use common $op function."
        "___x_cmd_env_common_${op}" "$candidate" "$@"
    fi
}

# EndSection

# Section: install, uninstall
___x_cmd_env_main_install(){
    # TODO: You can do more better in #2 advise json
    param:scope "env"
    param:dsl <<A
advise:
    #2        xrc env/latest && ___x_cmd_env_advise_ls_remote_version
options:
    #1        "Environment Candidates" <candidates>:candidates_list
    #2        "Version"                <version>="default"
A
    param:run

    if [ -z "$1" ]; then
        ___x_cmd_env_main_install help
        return 1
    fi
    ___x_cmd_env_run_common_if_notfound install "$@"
}

___x_cmd_env_main_uninstall(){
    param:scope "env"
    param:dsl <<A
advise:
    #2        xrc env/latest && ___x_cmd_env_advise_ls_local_version
options:
    #1        "Environment Candidates" <candidates>:candidates_list
    #2        "Version"                <version>
A
    param:run

    if [ -z "$1" ]; then
        ___x_cmd_env_main_uninstall help
        return 1
    fi

    ___x_cmd_env_run_common_if_notfound uninstall "$@"
}
# EndSection

# Section: ls, la
___x_cmd_env_main_ls(){
    param:scope "env"
    param:dsl <<A
options:
    --cache|-c         "Use cache"
    --remote|-r        "List version including remote"
    #1|--candidate     "Environment Candidates" <candidates>:candidates_list
A
    param:run

    if [ -z "$candidate" ]; then
        env_log warn "No candidate specified"
        ___x_cmd_env_main_ls --help
        return 1
    fi

    # TODO: 增加 本地简写版本对应关系 和 全局简写版本对应关系
    # TODO: V8 -> V8.2   --> (Remote) V8.6
    if [ -n "$remote" ] ; then
		___x_cmd_env_run_common_if_notfound ls_remote "$@"
        return
    fi

    ___x_cmd_env_run_common_if_notfound ls_local "$@"
}


___x_cmd_env_main_la(){
    ___x_cmd_env_run_common_if_notfound la "$@"
}

# EndSection

# Section: use, try, ws
___x_cmd_env_main_try(){
    param:scope "env"
    param:dsl <<A
advise:
    #2        xrc env/latest && ___x_cmd_env_advise_ls_local_version
options:
    #1        "Environment Candidates" <candidates>:candidates_list
    #2        "Version"                <version>="default"
A
    param:run

    ___x_cmd_env_run_common_if_notfound try "$@"
}

___x_cmd_env_main_use(){
    param:scope "env"
    param:dsl <<A
advise:
    #2        xrc env/latest && ___x_cmd_env_advise_ls_local_version
options:
    --no-shims    "Don't use shims"
    #1            "Environment Candidates" <candidates>:candidates_list
    #2            "Version"                <version>="default"
A
    param:run

    ___x_cmd_env_run_common_if_notfound use "$@"
}

___x_cmd_env_main_ws(){
    if [ $# -eq 0 ]; then
        : TODO: list workspace environment
    fi

    ___x_cmd_env_run_common_if_notfound ws "$@"
}

# EndSection

# Section: current
___x_cmd_env_main_current(){
    param:scope "env"
    param:dsl <<A
options:
    #1        "Environment Candidates" <candidates>:candidates_list
A
    param:run

    ___x_cmd_env_run_common_if_notfound current "$@"
}

# EndSection

# Section: download, which, exec
___x_cmd_env_main_download(){

    param:scope "env"
    param:dsl <<A
advise:
    #2        xrc env/latest && ___x_cmd_env_advise_ls_remote_version
options:
    #1        "Environment Candidates" <candidates>:candidates_list
    #2        "Version"                <version>="default"
A
    param:run

    ___x_cmd_env_run_common_if_notfound download "$@"
}

___x_cmd_env_main_which(){
    param:scope "env"
    param:dsl <<A
options:
    #1        "Environment Candidates" <candidates>:candidates_list
A
    param:run

    ___x_cmd_env_run_common_if_notfound which "$@"
}


___x_cmd_env_main_exec(){
    param:scope "env"
    param:dsl <<A
advise:
    #2        xrc env/latest && ___x_cmd_env_advise_ls_local_version
options:
    #1        "Environment Candidates" <candidates>:candidates_list
    #2        "Version"                <version>
A
    param:run


    if [ -z "$1" ]; then
        ___x_cmd_env_main_exec help
        return 1
    fi

    ___x_cmd_env_run_common_if_notfound exec "$@"
}


# EndSection

# Section: Candidate API
___x_cmd_env_candidate_all(){
    printf "%s" "
python
node
go
java
deno
perl
kotlin
"

}

___x_cmd_env_candidate_has(){
    local target="${1:?Provide target}"
    local s="$(___x_cmd_env_candidate_all)"
    if [ "$s" = "${s#*
$target
}" ]; then
        return 1
    fi
    return 0
}

# EndSection
