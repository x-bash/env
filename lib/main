# ___X_CMD_ENV_VERSION_CONFIG="
# java=1.1
# node=1.2
# python=1.3
# "

___x_cmd_env_get_version(){
    local pkg_name="${1:?Provide pkg name}"
    local version="${2:?Provide version}"
    if [ "$version" != "$pkg_name" ]; then
        printf "%s\n" "$version"
    else
        x pkg default_version "$pkg_name"
    fi
}


___x_cmd_env_prepare(){
    local i
    x:trace x/env
    for i in "$@"; do
        pkg:info "env prepare: packname:${i%=*} version:$(___x_cmd_env_get_version "${i%=*}" "${i#*=}")"
        if ! x pkg install "${i%=*}" "$(___x_cmd_env_get_version "${i%=*}" "${i#*=}")"; then
            pkg:error "Cannot install package: $i"
            return 1;
        fi
    done
}

___x_cmd_env_try(){
    param:void
    x:trace x/env
    ___x_cmd_env_prepare "$@" || return
    ___X_CMD_ENV___VAR_ADD_NO_SETUP="" ___x_cmd_env___var_add "$@"
}

___x_cmd_env_use(){
    param:void
    x:trace x/env
    # ___x_cmd_env_try "$@"
    ___x_cmd_env_prepare "$@" || return

    local backup="$___X_CMD_ENV_VERSION_CONFIG"
    if [ -f "$___X_CMD_ENV_VERSION_CONFIG_PATH" ]; then
        ___X_CMD_ENV_VERSION_CONFIG="$(cat "$___X_CMD_ENV_VERSION_CONFIG_PATH")"
    else
        ___X_CMD_ENV_VERSION_CONFIG=""
    fi

    ___X_CMD_ENV___VAR_ADD_NO_SETUP=1 ___x_cmd_env___var_add "$@"
    ___x_cmd_env_config_save

    ___X_CMD_ENV_VERSION_CONFIG="$backup"
}

___x_cmd_env_exec()(
    param:void

    local arg
    local s
    for arg in "$@"; do
        case "$arg" in
            *=*)        s="$s $arg" ;;
            *)          break
        esac
    done
    eval ___x_cmd_env_use "$s" && "$@"
)
